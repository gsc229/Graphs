# Create a queue
        # Enqueue A PATH TO the starting vertex
        # Create a set to store visited vertices
        # While the queue is not empty...
            # Dequeue the first PATH
            # GRAB THE VERTEX FROM THE END OF THE PATH
            # Check if it's been visited
            # If it hasn't been visited...
                # Mark it as visited
                # CHECK IF IT'S THE TARGET
                    # IF SO, RETURN THE PATH
                # Enqueue A PATH TO all it's neighbors
                    # MAKE A COPY OF THE PATH
                    # ENQUEUE THE COPY

dft
# Create a stack
# Push the starting vertex
# Create a set to store visited vertices
# While the stack is not empty...
    # Pop the first vertex
    # Check if it has been visited
    # If it hasn't been visited...
        #Mark it as visited
        #Push all of it's neighbors

dfs
# Create a stack
# Push a PATH to the starting vertex
# Create a set to store visited vertices
# While the stack is not empty...
    # Pop the first PATH
    # Grab the vertex from the end of the path
    # Check if it has been visited
    # If it hasn't been visited...
        #Mark it as visited
        #Push all of it's neighbors


bfs
# Create a queue
# Enqueue a PATH TO the starting vertex
# Create a set to store visited verticies
# While the queue is not empty...
    # Dequeue the first PATH
    # Grab the vertex from the end of the path
    # Check if it has been visited 
    # If it hasn't been visited...
        #Mark it as visited
        # Check if it's the TARGET
            # if target then return path
        # Enqueue a path to all it's neighbors
            # Make a copy of the path
            # Enqueue the copy
            
